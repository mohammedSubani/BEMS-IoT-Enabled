//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WeatherService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WeatherService.IService")]
    public interface IService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetWeatherJSON", ReplyAction="http://tempuri.org/IService/GetWeatherJSONResponse")]
        bool GetWeatherJSON(double latitude, double longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetWeatherJSON", ReplyAction="http://tempuri.org/IService/GetWeatherJSONResponse")]
        System.Threading.Tasks.Task<bool> GetWeatherJSONAsync(double latitude, double longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SucessRetrieval", ReplyAction="http://tempuri.org/IService/SucessRetrievalResponse")]
        bool SucessRetrieval();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SucessRetrieval", ReplyAction="http://tempuri.org/IService/SucessRetrievalResponse")]
        System.Threading.Tasks.Task<bool> SucessRetrievalAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCondition", ReplyAction="http://tempuri.org/IService/GetConditionResponse")]
        string GetCondition();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCondition", ReplyAction="http://tempuri.org/IService/GetConditionResponse")]
        System.Threading.Tasks.Task<string> GetConditionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTemp", ReplyAction="http://tempuri.org/IService/GetTempResponse")]
        string GetTemp();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTemp", ReplyAction="http://tempuri.org/IService/GetTempResponse")]
        System.Threading.Tasks.Task<string> GetTempAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetHum", ReplyAction="http://tempuri.org/IService/GetHumResponse")]
        string GetHum();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetHum", ReplyAction="http://tempuri.org/IService/GetHumResponse")]
        System.Threading.Tasks.Task<string> GetHumAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetWndSpeed", ReplyAction="http://tempuri.org/IService/GetWndSpeedResponse")]
        string GetWndSpeed();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetWndSpeed", ReplyAction="http://tempuri.org/IService/GetWndSpeedResponse")]
        System.Threading.Tasks.Task<string> GetWndSpeedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetWndDir", ReplyAction="http://tempuri.org/IService/GetWndDirResponse")]
        string GetWndDir();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetWndDir", ReplyAction="http://tempuri.org/IService/GetWndDirResponse")]
        System.Threading.Tasks.Task<string> GetWndDirAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIcon", ReplyAction="http://tempuri.org/IService/GetIconResponse")]
        string GetIcon();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIcon", ReplyAction="http://tempuri.org/IService/GetIconResponse")]
        System.Threading.Tasks.Task<string> GetIconAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCloudAmnt", ReplyAction="http://tempuri.org/IService/GetCloudAmntResponse")]
        string GetCloudAmnt();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCloudAmnt", ReplyAction="http://tempuri.org/IService/GetCloudAmntResponse")]
        System.Threading.Tasks.Task<string> GetCloudAmntAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IServiceChannel : WeatherService.IService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<WeatherService.IService>, WeatherService.IService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceClient() : 
                base(ServiceClient.GetDefaultBinding(), ServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), ServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public bool GetWeatherJSON(double latitude, double longitude)
        {
            return base.Channel.GetWeatherJSON(latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<bool> GetWeatherJSONAsync(double latitude, double longitude)
        {
            return base.Channel.GetWeatherJSONAsync(latitude, longitude);
        }
        
        public bool SucessRetrieval()
        {
            return base.Channel.SucessRetrieval();
        }
        
        public System.Threading.Tasks.Task<bool> SucessRetrievalAsync()
        {
            return base.Channel.SucessRetrievalAsync();
        }
        
        public string GetCondition()
        {
            return base.Channel.GetCondition();
        }
        
        public System.Threading.Tasks.Task<string> GetConditionAsync()
        {
            return base.Channel.GetConditionAsync();
        }
        
        public string GetTemp()
        {
            return base.Channel.GetTemp();
        }
        
        public System.Threading.Tasks.Task<string> GetTempAsync()
        {
            return base.Channel.GetTempAsync();
        }
        
        public string GetHum()
        {
            return base.Channel.GetHum();
        }
        
        public System.Threading.Tasks.Task<string> GetHumAsync()
        {
            return base.Channel.GetHumAsync();
        }
        
        public string GetWndSpeed()
        {
            return base.Channel.GetWndSpeed();
        }
        
        public System.Threading.Tasks.Task<string> GetWndSpeedAsync()
        {
            return base.Channel.GetWndSpeedAsync();
        }
        
        public string GetWndDir()
        {
            return base.Channel.GetWndDir();
        }
        
        public System.Threading.Tasks.Task<string> GetWndDirAsync()
        {
            return base.Channel.GetWndDirAsync();
        }
        
        public string GetIcon()
        {
            return base.Channel.GetIcon();
        }
        
        public System.Threading.Tasks.Task<string> GetIconAsync()
        {
            return base.Channel.GetIconAsync();
        }
        
        public string GetCloudAmnt()
        {
            return base.Channel.GetCloudAmnt();
        }
        
        public System.Threading.Tasks.Task<string> GetCloudAmntAsync()
        {
            return base.Channel.GetCloudAmntAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:25253/WEATHER_API/Service.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IService,
        }
    }
}
